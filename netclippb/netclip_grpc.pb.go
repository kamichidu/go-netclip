// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: netclip.proto

package netclippb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Netclip_List_FullMethodName   = "/xyz.kamichidu.netclip.Netclip/List"
	Netclip_Copy_FullMethodName   = "/xyz.kamichidu.netclip.Netclip/Copy"
	Netclip_Paste_FullMethodName  = "/xyz.kamichidu.netclip.Netclip/Paste"
	Netclip_Remove_FullMethodName = "/xyz.kamichidu.netclip.Netclip/Remove"
	Netclip_Expire_FullMethodName = "/xyz.kamichidu.netclip.Netclip/Expire"
	Netclip_Watch_FullMethodName  = "/xyz.kamichidu.netclip.Netclip/Watch"
)

// NetclipClient is the client API for Netclip service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetclipClient interface {
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Copy(ctx context.Context, in *CopyRequest, opts ...grpc.CallOption) (*CopyResponse, error)
	Paste(ctx context.Context, in *PasteRequest, opts ...grpc.CallOption) (*PasteResponse, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error)
	Expire(ctx context.Context, in *ExpireRequest, opts ...grpc.CallOption) (*ExpireResponse, error)
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (Netclip_WatchClient, error)
}

type netclipClient struct {
	cc grpc.ClientConnInterface
}

func NewNetclipClient(cc grpc.ClientConnInterface) NetclipClient {
	return &netclipClient{cc}
}

func (c *netclipClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, Netclip_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netclipClient) Copy(ctx context.Context, in *CopyRequest, opts ...grpc.CallOption) (*CopyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CopyResponse)
	err := c.cc.Invoke(ctx, Netclip_Copy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netclipClient) Paste(ctx context.Context, in *PasteRequest, opts ...grpc.CallOption) (*PasteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PasteResponse)
	err := c.cc.Invoke(ctx, Netclip_Paste_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netclipClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveResponse)
	err := c.cc.Invoke(ctx, Netclip_Remove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netclipClient) Expire(ctx context.Context, in *ExpireRequest, opts ...grpc.CallOption) (*ExpireResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpireResponse)
	err := c.cc.Invoke(ctx, Netclip_Expire_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netclipClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (Netclip_WatchClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Netclip_ServiceDesc.Streams[0], Netclip_Watch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &netclipWatchClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Netclip_WatchClient interface {
	Recv() (*WatchResponse, error)
	grpc.ClientStream
}

type netclipWatchClient struct {
	grpc.ClientStream
}

func (x *netclipWatchClient) Recv() (*WatchResponse, error) {
	m := new(WatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NetclipServer is the server API for Netclip service.
// All implementations must embed UnimplementedNetclipServer
// for forward compatibility
type NetclipServer interface {
	List(context.Context, *ListRequest) (*ListResponse, error)
	Copy(context.Context, *CopyRequest) (*CopyResponse, error)
	Paste(context.Context, *PasteRequest) (*PasteResponse, error)
	Remove(context.Context, *RemoveRequest) (*RemoveResponse, error)
	Expire(context.Context, *ExpireRequest) (*ExpireResponse, error)
	Watch(*WatchRequest, Netclip_WatchServer) error
	mustEmbedUnimplementedNetclipServer()
}

// UnimplementedNetclipServer must be embedded to have forward compatible implementations.
type UnimplementedNetclipServer struct {
}

func (UnimplementedNetclipServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedNetclipServer) Copy(context.Context, *CopyRequest) (*CopyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Copy not implemented")
}
func (UnimplementedNetclipServer) Paste(context.Context, *PasteRequest) (*PasteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Paste not implemented")
}
func (UnimplementedNetclipServer) Remove(context.Context, *RemoveRequest) (*RemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedNetclipServer) Expire(context.Context, *ExpireRequest) (*ExpireResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Expire not implemented")
}
func (UnimplementedNetclipServer) Watch(*WatchRequest, Netclip_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedNetclipServer) mustEmbedUnimplementedNetclipServer() {}

// UnsafeNetclipServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetclipServer will
// result in compilation errors.
type UnsafeNetclipServer interface {
	mustEmbedUnimplementedNetclipServer()
}

func RegisterNetclipServer(s grpc.ServiceRegistrar, srv NetclipServer) {
	s.RegisterService(&Netclip_ServiceDesc, srv)
}

func _Netclip_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetclipServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Netclip_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetclipServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Netclip_Copy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetclipServer).Copy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Netclip_Copy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetclipServer).Copy(ctx, req.(*CopyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Netclip_Paste_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetclipServer).Paste(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Netclip_Paste_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetclipServer).Paste(ctx, req.(*PasteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Netclip_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetclipServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Netclip_Remove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetclipServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Netclip_Expire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetclipServer).Expire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Netclip_Expire_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetclipServer).Expire(ctx, req.(*ExpireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Netclip_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetclipServer).Watch(m, &netclipWatchServer{ServerStream: stream})
}

type Netclip_WatchServer interface {
	Send(*WatchResponse) error
	grpc.ServerStream
}

type netclipWatchServer struct {
	grpc.ServerStream
}

func (x *netclipWatchServer) Send(m *WatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Netclip_ServiceDesc is the grpc.ServiceDesc for Netclip service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Netclip_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xyz.kamichidu.netclip.Netclip",
	HandlerType: (*NetclipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Netclip_List_Handler,
		},
		{
			MethodName: "Copy",
			Handler:    _Netclip_Copy_Handler,
		},
		{
			MethodName: "Paste",
			Handler:    _Netclip_Paste_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Netclip_Remove_Handler,
		},
		{
			MethodName: "Expire",
			Handler:    _Netclip_Expire_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Netclip_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "netclip.proto",
}
